#!/bin/bash

VERSION=4.1.3

current_working_dir=`pwd`
bashdot_config_file=$HOME/.bashdot

LOGGER_FMT=${LOGGER_FMT:="%Y-%m-%d"}
LOGGER_LVL=${LOGGER_LVL:="info"}

if [ ! -z "$BASHDOT_LOG_LEVEL" ]; then
    LOGGER_LVL=$BASHDOT_LOG_LEVEL
fi

action=$1

usage() {
    case "$1" in
        commands)
            echo "Usage: bashdot [dir|install|links|profiles|uninstall|version] OPTIONS"
            ;;
        install)
            echo "Usage: bashdot install PROFILE1 PROFILE2 ... PROFILEN"
            ;;
        uninstall)
            echo "Usage: bashdot uninstall PROFILE_DIRECTORY PROFILE"
            ;;
    esac
}

if [ "$action" != "dir" ] && [ "$action" != "install" ] &&
    [ "$action" != "links" ] && [ "$action" != "profiles" ] &&
    [ "$action" != "uninstall" ] && [ "$action" != "version" ]; then
    usage commands
    exit 1
fi

exit_if_profile_directories_contain_invalid_characters() {
    profile_dir=$1
    ls "$profile_dir" | egrep '[[:space:]:,/\]'
    if [ $? -eq 0 ]; then
        log error "Files in '$profile_dir' contain invalid characters."
        exit 1
    fi
}

exit_if_invalid_directory_name() {
    dir=$1
    echo "$dir" | grep "^[/.a-zA-Z0-9_-]*$" > /dev/null
    if [ $? -ne 0 ]; then
        log error "Current working directory '$dir' has an invalid character. The directory you are in when you install a profile must have alpha numberic characters, with only dashes, dots or underscores."
        exit 1
    fi
}

exit_if_invalid_profile_name() {
    profile=$1
    echo "$profile" | grep "^[a-zA-Z0-9_-]*$" > /dev/null
    if [ $? -ne 0 ]; then
        log error "Invalid profile name '$profile'. Profiles must be alpha numeric with only dashes or underscores."
        exit 1
    fi
}

log() {
    action=$1 && shift

    case "$action" in
        debug)  [[ "$LOGGER_LVL" =~ debug ]]           && echo "$( date "+${LOGGER_FMT}" ) - DEBUG - $@" 1>&2 ;;
        info)   [[ "$LOGGER_LVL" =~ debug|info ]]      && echo "$( date "+${LOGGER_FMT}" ) - INFO - $@" 1>&2  ;;
        warn)   [[ "$LOGGER_LVL" =~ debug|info|warn ]] && echo "$( date "+${LOGGER_FMT}" ) - WARN - $@" 1>&2  ;;
        error)  [[ ! "$LOGGER_LVL" =~ none ]]          && echo "$( date "+${LOGGER_FMT}" ) - ERROR - $@" 1>&2 ;;
    esac

    true
}

link_dotfile() {
    dotfile=$1
    source_file=$2

    existing=`readlink "$dotfile"`
    log debug "Evaluating if '$dotfile' which links to '$existing' matches desired target '$source_file'."

    if [ "$existing" == "$source_file" ]; then
        log info "File '$dotfile' already links to '$source_file', continuing."
        return
    fi

    log debug "'$dotfile' does not link to desired target '$source_file'."
    log info "Linking '$source_file' to '$dotfile'."
    ln -s "$source_file" "$dotfile"
}

install() {
    profile=$1
    profile_dir="$current_working_dir/$profile"

    exit_if_profile_directories_contain_invalid_characters "$profile_dir"

    # Pipe seperated regex (parsed by egrep, case insensitive)
    # that will not be symlinked by bashdot
    ignored_files='^changelog|^contributing|^dockerfile|^icon|^license|^makefile|^readme'

    if [ ! -d "$profile_dir" ]; then
        log error "Profile '$profile' directory does not exist."
        exit 1
    fi

    log info "Adding dotfiles profile '$profile'."

    log debug "Checking for exiting conflicting dotfiles."
    cd "$profile_dir"
    for file in `ls |egrep -iv "$ignored_files"`; do
        dotfile=~/."$file"
        source_file="$profile_dir/$file"
        if [ -e "$dotfile" ]; then
            existing=`readlink "$dotfile"`

            # Skip files which already link to the same location
            if [ "$existing" == "$source_file" ]; then
                continue
            fi

            log error "File '$dotfile' already exists, exiting."
            exit 1
        fi
    done
    log debug "Found no conflicting dotfiles in home, proceeding to link dotfile."

    if [ -f "$bashdot_config_file" ]; then
        egrep "^$current_working_dir$" "$bashdot_config_file" > /dev/null

        if [ $? -ne 0 ]; then
            log info "Appending '$current_working_dir' to bashdot config file '$bashdot_config_file'"
            echo "$current_working_dir" >> "$bashdot_config_file"
        fi
    else
        log info "Creating bashdot config file '$bashdot_config_file' with '$current_working_dir'."
        echo "$current_working_dir" > "$bashdot_config_file"
    fi

    for skipped_file in `ls -ad .*`; do
        if [ "$skipped_file" != ".." ] && [ "$skipped_file" != "." ]; then
            log warn "Skipping file with dot prepended '$skipped_file'. Remove dot if file should be linked."
        fi
    done

    # For each template, we will source it, and write the output to dev null. But send
    # error to std out.  This wille ensure that all variables are set prior running or
    # exit with an error on the unset variable.
    for template in `ls |egrep '.*\.template$'`; do
        source_file="$profile_dir/$template"
        log info "Ensuring all variables in template '$source_file' are set."

        # Eval in current environment with 'set -u' to error on unset variables
        # For some reason both 'set -u' below are required in my testing, I'm
        # not sure why.
        set -u
        eval set -u "cat <<EOF
$(<"$source_file")
EOF" > /dev/null
    done
    set +u
    log info "All variables used in templates are set."

    log info "Installing dotfiles from '$profile_dir'."
    for file in `ls |egrep -iv "$ignored_files"`; do
        source_file="$profile_dir/$file"

        if [[ "$source_file" == *.template ]]; then
            rendered_file_name=`echo "$file" | sed -e 's/^\(.*\)\.template/\1.rendered/'`
            rendered_file_path="$profile_dir/$rendered_file_name"

            log info "'$source_file' is a template, rendering to '$rendered_file_path'."
            dotfile_name=`echo "$file" | sed -e 's/^\(.*\)\.template/\1/'`
            dotfile=~/."$dotfile_name"

            # Eval in current environment to replace variables with current environment
            eval "cat <<EOF
$(<"$source_file")
EOF" > $rendered_file_path 2> /dev/null

            # Linking dotfile to rendered file path
            link_dotfile "$dotfile" "$rendered_file_path"
        else
            dotfile=~/."$file"
            link_dotfile "$dotfile" "$source_file"
        fi

    done

    log info "Completed adding dotfiles profile '$profile'."
}

list_links() {
    for file in $(ls -a ~); do

        # Only evaluate symlinks
        if [[ -h ~/"$file" ]]; then

            # Only include if it points to the dotfiles directory
            for bashdot_dir in $(cat "$bashdot_config_file"); do
                expected_target_file_name=`basename "$file" | cut -c 2-`
                readlink ~/"$file" |egrep "^$bashdot_dir/[a-zA-Z0-9_-]*/$expected_target_file_name(\.rendered)?$" > /dev/null
                if [ $? -eq 0 ];then
                    echo $file
                fi
            done
        fi
    done
}

list_profiles() {
    if [ ! -f "$bashdot_config_file" ];then
        log info "No dotfiles installed by bashdot."
    else
        for dir in $(cat "$bashdot_config_file"); do
            for link in $(list_links); do
                expected_target_file_name=`basename "$link" | cut -c 2-`
                readlink ~/"$link" | egrep "^$dir/[.a-zA-Z0-9_-]*/$expected_target_file_name(\.rendered)?$" > /dev/null
                if [ $? -eq 0 ]; then
                    profile=`readlink ~/"$link" |sed -e "s/^.*\/[.a-zA-Z0-9_-]*\/\(.*\)\/.*$/\1/"`
                    echo "$dir $profile"
                fi
            done
        done |sort |uniq
    fi
}

show_links() {
    for link in $(list_links); do
        dest=`readlink ~/"$link"`
        chomped_link="${link%\\n}"
        echo "~/$chomped_link -> $dest"
    done
}

dir() {
    if [ ! -f "$bashdot_config_file" ]; then
        log info "No dotfiles installed by bashdot."
    else
        cat "$bashdot_config_file" |sort
    fi
}

uninstall() {
    dir=$1
    profile=$2

    if [ ! -f "$bashdot_config_file" ]; then
        log error "Config file '$bashdot_config_file' not found."
        log error "No dotfiles installed by bashdot."
        exit 1
    fi

    # Don't proceed with uninstall if profiles not available in given directory
    list_profiles |grep "^$dir $profile$" > /dev/null
    if [ $? -ne 0 ];then
        log error "Profile '$profile' not installed from '$dir'."
        exit 1
    fi

    # Loop through each file and only remove if they are a symlink
    # and point to a file in this profile in the target dir
    for link in $(list_links);do
        log debug "Evaluating '$link' for removal."
        target=`readlink ~/"$link"`

        # Check if link target is part of this bashdot profile
        expected_target_file_name=`basename "$link" | cut -c 2-`
        echo "$target" |egrep "^$dir/$profile/${expected_target_file_name}(\.rendered)?$" > /dev/null
        if [ $? -eq 0 ]; then
            # If a link target was rendered from a template, remove
            # the rendered file on uninstall
            echo "$target" |egrep '\.rendered$' > /dev/null
            if [ $? -eq 0 ]; then
                log info "Removing rendered file '$target'."
                \rm "$target"
            fi

            log info "Removing '$link'."
            \rm ~/"$link"
        fi
    done
    log debug "All links for profile '$profile' removed."

    # If no more profiles point to this directory, remove it
    log debug "Updating bashdot config file '$bashdot_config_file'."
    dir_empty=true
    for link in $(list_links); do
        log debug "Evaluating if '$link' is part of a bashdot profile in dir '$dir'."
        expected_target_file_name=`basename "$link" | cut -c 2-`
        echo `readlink ~/"$link"` |egrep "^$dir/[a-zA-Z0-9_-]*/${expected_target_file_name}(\.rendered)?$" > /dev/null
        if [ $? -eq 0 ]; then
            log debug "'$link' is part of a bashdot profile in '$dir', not removing '$dir' from '$bashdot_config_file'."
            dir_empty=false
            break
        fi
    done

    if [ "$dir_empty" = true ]; then
        log info "Removing '$dir' from '$bashdot_config_file'."
        mv "$bashdot_config_file" "${bashdot_config_file}".backup
        cat "${bashdot_config_file}".backup |grep -v "^$dir$" > "$bashdot_config_file"
    fi

    # If there are no more bashdot profiles, remove .bashdot and backup
    if [ ! -s "$bashdot_config_file" ]; then
        log info "No more bashdot profiles installed, removing '$bashdot_config_file'."
        \rm -f "$bashdot_config_file" "${bashdot_config_file}".backup
    fi
}

case "$action" in
    dir)
        dir
        ;;
    install)
        if [ $# -lt 2 ]; then
            usage install
            exit 1
        fi

        exit_if_invalid_directory_name "$current_working_dir"

        while true; do
            shift

            if [ -z "$1" ];then
                break
            fi

            exit_if_invalid_profile_name "$1"
            install "$1"
        done

        log info "Completed installation of all profiles succesfully."
        ;;
    links)
        show_links
        ;;
    profiles)
        list_profiles
        ;;
    uninstall)
        if [ $# -ne 3 ]; then
            usage uninstall
            exit 1
        fi
        uninstall "$2" "$3"
        log info "Completed uninstallation succesfully."
        ;;
    version)
        echo "$VERSION"
        ;;
esac
