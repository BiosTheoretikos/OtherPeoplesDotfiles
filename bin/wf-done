#!/usr/bin/env bash

# Prepare a branch for deployment and *force-push* to remote
#
# Usage:
#   wf-done [--no-test] [--no-push]
#
# Author: Artem Sapegin, sapegin.me
# License: MIT
# https://github.com/sapegin/dotfiles

# Exit on any failed command
set -e

RED="$(tput setaf 1)"
CYAN="$(tput setaf 6)"
MAGENTA="$(tput setaf 5)"
YELLOW="$(tput setaf 3)"
GREEN="$(tput setaf 2)"
UNDERLINE="$(tput sgr 0 1)"
BOLD="$(tput bold)"
NOCOLOR="$(tput sgr0)"

function header() { echo -e "\n$1  $UNDERLINE$CYAN$2$NOCOLOR\n"; }
function error() { echo -e "\n$UNDERLINE$RED$1$NOCOLOR\n"; }

function unicorn() {
	echo -e $BOLD"        ."$NOCOLOR
	echo -e $BOLD"       /'"$NOCOLOR
	echo -e $BOLD"      //"$NOCOLOR
	echo -e $BOLD"  .  //"$NOCOLOR
	echo -e $BOLD"  |\//7"$NOCOLOR
	echo -e $BOLD" /' \" \\"$NOCOLOR
	echo -e $BOLD".   "$NOCOLOR$MAGENTA". ."$NOCOLOR"    "$CYAN"Your branch is ready!"$NOCOLOR
	echo -e $BOLD"| (    \\"$NOCOLOR
	echo -e $BOLD"|  '._  '  /"$NOCOLOR
	echo -e $BOLD"/    \'-'"$NOCOLOR
}

function nyan() {
	echo -en $RED"-_-_-_-_-_-_-_"
	echo -e $NOCOLOR$BOLD$BOLD",------,"$NOCOLOR
	echo -en $YELLOW$WHIT"_-_-_-_-_-_-_-"
	echo -e $NOCOLOR$BOLD$BOLD"|   /\_/\\"$NOCOLOR"  "$CYAN"Your branch is ready!"$NOCOLOR
	echo -en $GREEN"-_-_-_-_-_-_-"
	echo -e $NOCOLOR$BOLD$BOLD"~|__( "$MAGENTA"^"$NOCOLOR$BOLD" ."$MAGENTA"^"$NOCOLOR$BOLD")  /"$NOCOLOR
	echo -en $CYAN"-_-_-_-_-_-_-"
	echo -e $NOCOLOR$BOLD$BOLD'""  ""'$NOCOLOR
}

# Is repository dirty (has uncommitted changes)?
function is_dirty() {
	if [ "$(git status --porcelain 2>/dev/null)" ]; then
		return 0 # Success
	else
		return 1
	fi
}

function cleanup() {
	# Restore package-lock.json
	if [ -f "package-lock.json" ]; then
		git checkout package-lock.json >/dev/null 2>&1 || true
	fi
}

# PT ticket ID
function pt_id() {
	git symbolic-ref HEAD 2>/dev/null | tr -cd "[:digit:]\n"
}

command -v wf >/dev/null 2>&1 || { echo >&2 "wf is not installed"; exit 1; }

# Cleanup on errors
trap cleanup EXIT

# Dirty repo?
if is_dirty; then
	error "Repo is dirty"
	echo "You nave uncommitted changes, commit them before continue."
	echo
	git status
	exit 1
fi

# Remote has new commits?
diff=$(git rev-list --count --left-only @'{u}'...HEAD)
if [ "$diff" != "0" ]; then
	error "Remote history differs"
	echo "Pull changes before continue."
	echo
	exit 1
fi

SKIP_TEST=""
SKIP_PUSH=""
while test $# -gt 0
do
    case "$1" in
        --no-test) SKIP_TEST="1"
            ;;
        --no-push) SKIP_PUSH="1"
            ;;
    esac
    shift
done

TYPE=$(basename $(pwd))

if [ -z "$SKIP_TEST" ]; then
	header "💣" "Testing..."
	if [ "$TYPE" == "resources" ]; then
		npm run flow check
		npm test
	else
		wf test unit
	fi

	header "🐶" "Sniffing..."
	wf sniff

	header "💇" "Formatting..."
	wf format

	cleanup
fi

# Commit files changed during formatting
if is_dirty; then
	git add .
	git commit -m "Format code"
fi

header "🔮" "Merging master..."
git fetch origin master
git merge origin/master --no-edit

if [ -z "$SKIP_PUSH" ]; then
	header "🚀" "Pushing..."
	git push
fi

################################################################################

echo

if [ "$TYPE" == "resources" ]; then
	unicorn
else
	nyan
fi

echo
echo "Now join the deployment queue here:"
echo $UNDERLINE"http://deploy.wayfair.com/v/integrator/join_queue"$NOCOLOR
echo
echo "Don’t forget to edit your commit message when deploying!"
echo
