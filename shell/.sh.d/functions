# -*- mode: sh -*-

sysinfo() {
  clear
  ufetch
  music info
  pcs() { for i in {0..7}; do echo -en "\e[${1}$((30+$i))m \u2588\u2588 \e[0m"; done; }
  printf "\n%s\n%s\n\n" "$(pcs)" "$(pcs '1;')"
}

sleepm() {
  sleep $(($1 * 60))
}

clean_shot() {
  if [ -f "$HOME/Last_Shot/shot.png" ]; then
    mv "$HOME/Last_Shot/shot.png" "$(cat "$HOME/Last_Shot/.shot.txt")"
    rm "$HOME/Last_Shot/.shot.txt"
  fi
}

shot_location() {
  clean_shot
  mkdir -p $HOME/Screenshots
  mkdir -p $HOME/Last_Shot

  echo "$HOME/Screenshots/$(date +%y-%m-%d-%H:%M:%S).png" > "$HOME/Last_Shot/.shot.txt"
  echo "$HOME/Last_Shot/shot.png"
}

shot() {
  # eval $(slop)
  G="$(slop -p ${1:-0})"
  maim -g ${G} "$(shot_location)"
}

shellshot() {
  eval echo "$(elisp '(ns/windowshot)')" | pb 0x0
}

fullshot() {
  [ ! -z "$1" ] && sleep $1
  maim "$(shot_location)"
}

lastshot() {
 echo "$HOME/Last_Shot/shot.png"
}

viewshot() {
  meh "$(lastshot)"
}

upshot() {
  # todo: trim this, use xeros pb, import it, then paste and alert on your own
  uguush -o 0x0 -u "$(lastshot)"
}

# current monitor only - bspwm specific
monshot() {
  json="$(bspc query -T -m)"
  jget() {
    echo "$json" | jq .rectangle.$1
  }

  w=$(jget width)
  h=$(jget height)
  x=$(jget x)
  y=$(jget y)

  maim -g ${w}x${h}+${x}+${y} "$(shot_location)"
}

settitle() {
  $ESHELL && return
  printf "%b%s" "\033]0;$*\a"
}

defaulttitle() {
  settitle "$(basename $PWD) - $(basename $SHELL)"
}

linewrap() {
  ${1:-true} && echo $'\e[?7h' || echo $'\e[?7l'
}

cursorStyle() {
  [ "$TERM" = "linux" ] && return
  $ESHELL && return

  case "$1" in
    bar)       index=6 ;;
    underline) index=4 ;;
    block)     index=2 ;;
  esac

  printf "%b%s" "\e[${index} q"
}

gitupdate() {
  cur_dir=$(pwd)

  # Find all git repositories and update it to the master latest revision
  for i in $(find . -name ".git" | cut -c 3-); do
    echo "$i";

    cd "$i";
    cd ..;

    git pull origin master;
    cd $cur_dir
  done
}

# Change to root of git repo
groot() {
  if git status &> /dev/null; then
    cd $(git rev-parse --show-toplevel)
  else
    echo "Error: Not a git repository"
    return 128
  fi
}

# nix query
nq() {
  local CACHE="$HOME/.cache/nq-cache"
  if ! ( [ -e $CACHE ] && [ $(stat -c %Y $CACHE) -gt $(( $(date +%s) - 3600 )) ] ); then
    echo "update cache" && nix-env -qa --json > "$CACHE"
  fi
  jq -r 'to_entries | .[] | .key + "|" + .value.meta.description' < "$CACHE" |
    {
      if [ $# -gt 0 ]; then
        # double grep because coloring breaks column's char count
        # $* so that we include spaces (could do .* instead?)
        grep -i "$*" | column -t -s "|" | grep -i "$*"
      else
        column -t -s "|"
      fi
    }
}

dec2hex() {
  printf "%X\n" $1
}

hex2dec() {
  printf "%d\n" 0x$1
}

extract() {      # Handy Extract Program
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1     ;;
      *.tar.gz)    tar xvzf $1     ;;
      *.bz2)       bunzip2 $1      ;;
      *.rar)       unrar x $1      ;;
      *.gz)        gunzip $1       ;;
      *.tar)       tar xvf $1      ;;
      *.tbz2)      tar xvjf $1     ;;
      *.tgz)       tar xvzf $1     ;;
      *.zip)       unzip $1        ;;
      *.Z)         uncompress $1   ;;
      *.7z)        7z x $1         ;;
      *)           echo "'$1' cannot be extracted via >extract<" ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

# manpages with colors
man() {
  settitle "$* - manual"
  # removing standout means find highlights stay inverted..
  #LESS_TERMCAP_so=$(printf '\e[38;5;246m') \

  env LESS_TERMCAP_mb=$(printf '\e[01;31m') \
      LESS_TERMCAP_md=$(printf '\e[01;38;5;74m') \
      LESS_TERMCAP_me=$(printf '\e[0m') \
      LESS_TERMCAP_se=$(printf '\e[0m') \
      LESS_TERMCAP_ue=$(printf '\e[0m') \
      LESS_TERMCAP_us=$(printf '\e[04;38;5;146m') \
      man "$@"

  defaulttitle
}

page() {
  settitle "$* - less"
  less "$@"
  defaulttitle
}

dotadd() {
  file="$(find ~/bin | fzf)" || return
  file="$(basename "$file")"
  echo mv "$HOME/bin/$file" "$HOME/.dotfiles/bin/bin/$file"
  mv "$HOME/bin/$file" "$HOME/.dotfiles/bin/bin/$file"
  cd "$HOME/.dotfiles"
  stow bin
}

book() {
  player.sh pause
  google-chrome-stable "$(cat ~/.book_url)" &
}

passadd() {
  (echo "$2"; echo "$2") | pass add "$1"
}

gset() {
  case $1 in
    pass)
      git config user.name "$(pass git/name)"
      git config user.email "$(pass git/email)"
      ;;
    manual)
      echo name:; read _name
      git config user.name "$_name"

      echo email:; read _email
      git config user.email "$_email"
      ;;
    adhoc)
      _name="$(getent passwd "$USER" | cut -d ':' -f 5 | sed 's/,//g')"
      _name="${name:-$USER}"
      git config user.name "$_name"
      git config user.email "${USER}@$(hostname).machine"
      ;;
    *)
      echo options: pass home adhoc
      ;;
  esac
}

ttemp() {
  working_dir="$HOME/temps"
  current=$(date +%F_%T)

  mkdir -p "${working_dir}/${current}"
  cd "${working_dir}/${current}"

  if [ ! -z "$*" ]; then
    echo "$*" > ./context.txt
  fi
}
